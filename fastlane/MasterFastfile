# default_platform :ios

platform :ios do

  # Resources
  # TODO: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/UI.md
  # TODO: https://docs.fastlane.tools/advanced/#environment-variables
  # TODO: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md

  # ========= # 
  #   Enums   #
  # ========= #

  module BuildHost
    LOCAL = "local"
    BITRISE = "bitrise"
    CIRCLE_CI = "circle_ci"
    JENKINS = "jenkins"
  end

  # ============= # 
  #   Constants   #
  # ============= #

  IS_LOCAL = !is_ci
  ENV['IS_LOCAL'] = IS_LOCAL ? 'true' : 'false'

  # ======================= # 
  #   Computed Properties   #
  # ======================= #

  # Build Properties
  
  def build_host
    case
    when IS_LOCAL
      return BuildHost::LOCAL
    when ENV.key?("BITRISE_IO")
      return BuildHost::BITRISE
    when ENV.key?("CIRCLE_CI")
      return BuildHost::CIRCLE_CI
    when ENV.key?("JENKINS_URL")
      return BuildHost::JENKINS
    end
  end

  # IPA Properties

  def build_number
    return get_ipa_info_plist_value(ipa: ipa_file, key: "CFBundleVersion")
  end

  def bundle_identifier
    return get_ipa_info_plist_value(ipa: ipa_file, key: "CFBundleIdentifier")
  end

  def bundle_name
    return get_ipa_info_plist_value(ipa: ipa_file, key: "CFBundleIdentifier")
  end

  def bundle_version
    return get_ipa_info_plist_value(ipa: ipa_file, key: "CFBundleShortVersionString")
  end

  def full_version
    return "v#{bundle_version}b#{build_number}"
  end

  # File Properties

  def output_directory
    case build_host
    when BuildHost::BITRISE
      return ENV["BITRISE_DEPLOY_DIR"]
    when BuildHost::LOCAL
      return "./output/#{ENV["SH_APP_NAME"]}/#{ENV["SH_SCHEME"]}"
    else
      return "./output"
    end
  end

  def dsym_file
    return lane_context[SharedValues::DSYM_OUTPUT_PATH] || "#{output_directory}/#{ENV["SH_APP_NAME"]}.app.dSYM.zip"
  end

  def ipa_file
    return lane_context[SharedValues::IPA_OUTPUT_PATH] || "#{output_directory}/#{ENV["SH_APP_NAME"]}.ipa"
  end

  # Slack Properties

  def default_payload
    payload = {
      "Build Date" => Time.new.to_s,
      "Build Host" => build_host
    }

    if !lane_context[SharedValues::BUILD_NUMBER].nil? 
      payload["Build Number"] = lane_context[SharedValues::BUILD_NUMBER]
    end

    if !lane_context[SharedValues::VERSION_NUMBER].nil? 
      payload["Version"] = lane_context[SharedValues::VERSION_NUMBER]
    end

    if !lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK].nil? 
      payload["HockeyApp URL"] = lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]
    end

    if !lane_context[SharedValues::S3_HTML_OUTPUT_PATH].nil? 
      payload["Amazon S3 URL"] = lane_context[SharedValues::S3_HTML_OUTPUT_PATH]
    end

    if !ENV['BITRISE_BUILD_URL'].nil?
      payload['Bitrise URL'] = ENV['BITRISE_BUILD_URL']
    end

    return payload
  end

  # ========== # 
  #   Global   #
  # ========== #

  # error do |lane, exception|
  #   alert(message: exception.message, success: false)
  # end

  # ============= # 
  #   Preparing   #
  # ============= #

  desc "Checks various dependencies and installs or updates them accordingly. (Ruby Gems, Fastlane, Cocoapods, Xcode)"
  lane :check_dependencies do |options|
    if IS_LOCAL
      bundle_install
      update_fastlane
    end 

    cocoapods(
      try_repo_update_on_error: true
    )

    xcversion
  end

  desc "Sets various properties for the environment that will be used in multiple lanes."
  private_lane :setup_environment do |options|
    # Hide the Fastlane changelog if we're on CI
    if !IS_LOCAL
      ENV["FASTLANE_HIDE_CHANGELOG"] = "true"
    end

    # Set global variables (to be deprecated)
    SCHEME = ENV["SH_SCHEME"]

    if IS_LOCAL
      sh 'env'
    end
  end

  # =========== # 
  #   Testing   #
  # =========== #

  desc "Runs unit tests and outputs results in JUnit format."
  lane :test do |options|
    scan(
      # clean: IS_LOCAL,
      code_coverage: true,
      devices: ['iPhone 8'],
      output_directory: output_directory,
      output_files: "test_report.html,test_report.xml",
      output_types: "html,junit",
      # skip_build: true,
      skip_slack: IS_LOCAL
    )
  end

  # ================= # 
  #   Notifications   #
  # ================= #

  desc "Displays a notification if local, sends a message to slack if remote."
  private_lane :alert do |options|
    message = options[:message]

    # If there is no message, don't alert
    if !message
      next
    end

    payload = options[:payload].nil? ? default_payload : options[:payload]
    success = options[:success].nil? ? false : options[:success]
    force_slack = options[:force_slack].nil? ? false : options[:force_slack]

    # If local, send local notification, otherwise send a slack message (unless force_slack = true)
    if IS_LOCAL && !force_slack
      notification(message: message)

      if options[:say]
        say message
      end
    else 
      slack(
        # default_payloads: [:git_author, :git_branch, :git_commit, :git_commit_hash],
        message: message, 
        payload: payload,
        success: success
      )
    end
  end

  # ===================== # 
  #   Convenience Lanes   #
  # ===================== #

  # lane :bump_build_number do |options|
  #   if !ensure_git_status_clean
  #     increment_build_number
  #   end
      
  #   # if !IS_LOCAL
  #   #   sh "git checkout #{ENV["SH_VERSION_BUMP_BRANCH"]}"
  #   # end

    
  #   # commit_version_bump(
  #   #   message: "Version Bump to #{build_number} [skip ci]"
  #   # )

  #   # add_git_tag(
  #   #   tag: "b#{build_number}"
  #   # )

  #   # if IS_LOCAL
  #   #   push_to_git_remote
  #   # else
  #   #   push_to_git_remote(
  #   #     local_branch: ENV["SH_VERSION_BUMP_BRANCH"],
  #   #     remote: "origin",
  #   #     remote_branch: ENV["SH_VERSION_BUMP_BRANCH"]
  #   #   )
  #   # end
  # end

  desc "Adds the spec repo to the local cocoapods environment. (Local only)"
  lane :add_spec_repo do
    UI.user_error!("This lane is only available locally.") if !IS_LOCAL
    
    sh("pod repo add #{ENV['PODSPEC_REPO']} #{ENV['PODSPEC_REPO_URL']}")
    # sh("cd ~/.cocoapods/repo/#{ENV['PODSPEC_REPO']} && pod repo lint .")
  end

  desc "Adds all files to a commit and gets a message from the terminal if none is provided, then pushes to remote. (Local only)"
  lane :commit do |options|
    UI.user_error!("This lane is only available locally.") if !IS_LOCAL

    message = options[:message]

    if !message then
      message = UI.input("What did you change? (Enter commit message.)")
    end

    git_commit(path: ".", message: message)

    push_to_git_remote

    ensure_git_status_clean

    alert(message: "Committed!")
  end

  desc "Lints the pod library."
  lane :pod_lint do |options|
    allow_warnings = options[:allow_warnings] != nil ? options[:allow_warnings] : true
    verbose = options[:verbose] != nil ? options[:verbose] : !IS_LOCAL

    # verify_pod_keys
    pod_lib_lint(allow_warnings: allow_warnings, verbose: verbose)
  end

  # ======================= # 
  #   Convenience Methods   #
  # ======================= #

  def get_build_setting options={}
    if options[:xcodeproj].nil?
      UI.error "xcodeproj parameter must be provided"
      return nil
    end

    if options[:setting].nil?
      UI.error "setting parameter must be provided"
      return nil
    end

    fastlane_require 'xcodeproj'

    project = Xcodeproj::Project.open("../#{options[:xcodeproj]}")
    config = options[:configuration].nil? ? project.build_configurations.first : project.build_configurations.select { |t| t.name == options[:configuration] }.first
    setting = config.build_settings[options[:setting]]

    return setting
  end

  # def get_output_name options={}
  #   if options[:xcodeproj].nil?
  #     UI.error "xcodeproj parameter must be provided"
  #     return nil
  #   end
    
  #   build_number = get_build_number(xcodeproj: options[:xcodeproj])

  #   app_name = get_build_setting(
  #     xcodeproj: options[:xcodeproj],
  #     setting: "APPLICATION_BUNDLE_DISPLAY_NAME"
  #   )

  #   bundle_version = get_build_setting(
  #     xcodeproj: options[:xcodeproj],
  #     setting: "COMMON_APP_VERSION"
  #   )

  #   return "#{app_name}-#{bundle_version}-#{build_number}"
  # end

end
